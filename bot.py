import os
import asyncio
import random
import io
from datetime import datetime, timedelta
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()
TOKEN = os.getenv('BOT_TOKEN')

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class RegistrationState(StatesGroup):
    first_name = State()
    last_name = State()
    group = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞—è–≤–æ–∫
class BookingState(StatesGroup):
    purpose = State()
    date = State()
    time = State()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users_data = {}
user_ratings = {}
user_challenges = {}  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–µ–π

# –¢–µ–∫—É—â–∞—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å –∫–æ–≤–æ—Ä–∫–∏–Ω–≥–∞ (–¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ)
coworking_status = {
    "total_seats": 50,
    "occupied_seats": 23,
    "last_updated": datetime.now().strftime("%H:%M")
}

# –§–µ–π–∫–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞
fake_users = [
    {"name": "–ê–ª–µ–∫—Å–µ–π –ò–≤–∞–Ω–æ–≤", "group": "–ë–ò–í–¢-25-15", "rating": 150, "level": 3},
    {"name": "–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞", "group": "–ë–ò–í–¢-25-16", "rating": 120, "level": 3},
    {"name": "–î–º–∏—Ç—Ä–∏–π –°–∏–¥–æ—Ä–æ–≤", "group": "–ë–ò–í–¢-25-14", "rating": 95, "level": 2},
    {"name": "–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –í–æ–ª–∫–æ–≤–∞", "group": "–ë–ò–í–¢-25-17", "rating": 80, "level": 2},
    {"name": "–ò–≤–∞–Ω –ö–æ–∑–ª–æ–≤", "group": "–ë–ò–í–¢-25-15", "rating": 65, "level": 2},
    {"name": "–û–ª—å–≥–∞ –ù–æ–≤–∏–∫–æ–≤–∞", "group": "–ë–ò–í–¢-25-16", "rating": 45, "level": 1},
    {"name": "–ü–∞–≤–µ–ª –ú–æ—Ä–æ–∑–æ–≤", "group": "–ë–ò–í–¢-25-14", "rating": 30, "level": 1},
    {"name": "–ê–Ω–Ω–∞ –°–æ–∫–æ–ª–æ–≤–∞", "group": "–ë–ò–í–¢-25-17", "rating": 25, "level": 1},
    {"name": "–°–µ—Ä–≥–µ–π –û—Ä–ª–æ–≤", "group": "–ë–ò–í–¢-25-15", "rating": 15, "level": 1},
    {"name": "–ù–∞—Ç–∞–ª—å—è –õ–µ–±–µ–¥–µ–≤–∞", "group": "–ë–ò–í–¢-25-16", "rating": 5, "level": 1}
]

# –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏
weekly_challenges = [
    {
        "id": 1,
        "title": "–†–∞–Ω–Ω—è—è –ø—Ç–∞—à–∫–∞ üê¶",
        "description": "–ü—Ä–∏–¥–∏ –≤ –∫–æ–≤–æ—Ä–∫–∏–Ω–≥ –¥–æ 10 —É—Ç—Ä–∞ 3 —Ä–∞–∑–∞ –∑–∞ –Ω–µ–¥–µ–ª—é",
        "reward": 20,
        "progress": 0,
        "target": 3
    },
    {
        "id": 2,
        "title": "–ê–∫—Ç–∏–≤–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ ‚ö°",
        "description": "–ü–æ—Å–µ—Ç–∏ –∫–æ–≤–æ—Ä–∫–∏–Ω–≥ 5 —Ä–∞–∑ –∑–∞ –Ω–µ–¥–µ–ª—é",
        "reward": 30,
        "progress": 0,
        "target": 5
    },
    {
        "id": 3,
        "title": "–ü–æ–º–æ—â–Ω–∏–∫ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ ü§ù",
        "description": "–°–¥–µ–ª–∞–π 2 –¥–æ–Ω–∞—Ç–∞ –∑–∞ –Ω–µ–¥–µ–ª—é",
        "reward": 25,
        "progress": 0,
        "target": 2
    },
    {
        "id": 4,
        "title": "–°–æ—Ü–∏–∞–ª—å–Ω—ã–π –∞–∫—Ç–∏–≤–∏—Å—Ç üåü",
        "description": "–ü—Ä–µ–¥–ª–æ–∂–∏ 3 –∏–¥–µ–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–≤–æ—Ä–∫–∏–Ω–≥–∞",
        "reward": 15,
        "progress": 0,
        "target": 3
    }
]

# –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚≠ê –ú–æ–π —Ä–µ–π—Ç–∏–Ω–≥"), KeyboardButton(text="üèÜ –¢–æ–ø —Ä–µ–π—Ç–∏–Ω–≥")],
            [KeyboardButton(text="‚ù§Ô∏è –î–æ–Ω–∞—Ç"), KeyboardButton(text="üéØ –ß–µ–ª–ª–µ–Ω–¥–∂–∏")],
            [KeyboardButton(text="üìä –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å"), KeyboardButton(text="üìÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")],
            [KeyboardButton(text="üì± –ú–æ–π QR-–∫–æ–¥"), KeyboardButton(text="üö® –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ")]
        ],
        resize_keyboard=True
    )
    return keyboard

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    
    if user_id in users_data:
        await message.answer(
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {users_data[user_id]['first_name']}! üéâ",
            reply_markup=get_main_keyboard()
        )
    else:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ –∫–æ–≤–æ—Ä–∫–∏–Ω–≥-—Å–æ–æ–±—â–µ—Å—Ç–≤–æ! üöÄ\n"
            "–î–∞–≤–∞–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–µ–±—è. –ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –∏–º—è"
        )
        await state.set_state(RegistrationState.first_name)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏
@dp.message(RegistrationState.first_name)
async def process_first_name(message: types.Message, state: FSMContext):
    await state.update_data(first_name=message.text)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é:")
    await state.set_state(RegistrationState.last_name)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–º–∏–ª–∏–∏
@dp.message(RegistrationState.last_name)
async def process_last_name(message: types.Message, state: FSMContext):
    await state.update_data(last_name=message.text)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É –ø–æ –ø—Ä–∏–º–µ—Ä—É: –ë–ò–í–¢-25-15")
    await state.set_state(RegistrationState.group)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø—ã –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@dp.message(RegistrationState.group)
async def process_group(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    user_id = message.from_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users_data[user_id] = {
        'first_name': user_data['first_name'],
        'last_name': user_data['last_name'],
        'group': message.text,
        'username': message.from_user.username
    }
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∏ —á–µ–ª–ª–µ–Ω–¥–∂–∏
    user_ratings[user_id] = 0
    user_challenges[user_id] = weekly_challenges.copy()
    
    await message.answer(
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, {user_data['first_name']}! üéâ\n"
        "–†–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ –Ω–∞—à–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ!",
        reply_markup=get_main_keyboard()
    )
    await state.clear()

# –ö–Ω–æ–ø–∫–∞ "–ú–æ–π —Ä–µ–π—Ç–∏–Ω–≥"
@dp.message(lambda message: message.text == "‚≠ê –ú–æ–π —Ä–µ–π—Ç–∏–Ω–≥")
async def show_my_rating(message: types.Message):
    user_id = message.from_user.id
    
    if user_id not in users_data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —á–µ—Ä–µ–∑ /start")
        return
    
    rating = user_ratings.get(user_id, 0)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∏ –∑–≤–∞–Ω–∏–µ
    if rating < 50:
        level = 1
        rank = "–ù–æ–≤–∏—á–æ–∫ üê£"
    elif rating < 100:
        level = 2
        rank = "–ê–∫—Ç–∏–≤–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ ‚ö°"
    elif rating < 200:
        level = 3
        rank = "–õ–∏–¥–µ—Ä —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ üèÜ"
    else:
        level = 4
        rank = "–õ–µ–≥–µ–Ω–¥–∞ –∫–æ–≤–æ—Ä–∫–∏–Ω–≥–∞ üåü"
    
    await message.answer(
        f"üìä <b>–¢–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥:</b>\n"
        f"‚Ä¢ –ë–∞–ª–ª—ã: {rating} ‚≠ê\n"
        f"‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: {level}\n"
        f"‚Ä¢ –ó–≤–∞–Ω–∏–µ: {rank}\n\n"
        f"<i>–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™</i>",
        parse_mode='HTML'
    )

# –ö–Ω–æ–ø–∫–∞ "–¢–æ–ø —Ä–µ–π—Ç–∏–Ω–≥"
@dp.message(lambda message: message.text == "üèÜ –¢–æ–ø —Ä–µ–π—Ç–∏–Ω–≥")
async def show_top_rating(message: types.Message):
    user_id = message.from_user.id
    
    if user_id not in users_data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —á–µ—Ä–µ–∑ /start")
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–µ–π–∫–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
    sorted_users = sorted(fake_users, key=lambda x: x['rating'], reverse=True)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–ø–æ–º
    top_message = "üèÜ <b>–¢–æ–ø 10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–≤–æ—Ä–∫–∏–Ω–≥–∞:</b>\n\n"
    
    for i, user in enumerate(sorted_users[:10], 1):
        medal = ""
        if i == 1:
            medal = "ü•á "
        elif i == 2:
            medal = "ü•à "
        elif i == 3:
            medal = "ü•â "
        
        top_message += f"{medal}{i}. {user['name']} ({user['group']})\n"
        top_message += f"   ‚≠ê {user['rating']} –±–∞–ª–ª–æ–≤ | –£—Ä–æ–≤–µ–Ω—å {user['level']}\n\n"
    
    top_message += "<i>–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –±–∞–ª–ª—ã –∑–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è, –¥–æ–Ω–∞—Ç—ã –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!</i>"
    
    await message.answer(top_message, parse_mode='HTML')

# –ö–Ω–æ–ø–∫–∞ "–ß–µ–ª–ª–µ–Ω–¥–∂–∏"
@dp.message(lambda message: message.text == "üéØ –ß–µ–ª–ª–µ–Ω–¥–∂–∏")
async def show_challenges(message: types.Message):
    user_id = message.from_user.id
    
    if user_id not in users_data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —á–µ—Ä–µ–∑ /start")
        return
    
    challenges = user_challenges.get(user_id, weekly_challenges.copy())
    
    challenges_message = "üéØ <b>–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏:</b>\n\n"
    
    for challenge in challenges:
        progress_bar = "üü¢" * challenge['progress'] + "‚ö™" * (challenge['target'] - challenge['progress'])
        challenges_message += f"<b>{challenge['title']}</b>\n"
        challenges_message += f"{challenge['description']}\n"
        challenges_message += f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar} ({challenge['progress']}/{challenge['target']})\n"
        challenges_message += f"–ù–∞–≥—Ä–∞–¥–∞: {challenge['reward']} ‚≠ê\n\n"
    
    challenges_message += "<i>–í—ã–ø–æ–ª–Ω—è–π —á–µ–ª–ª–µ–Ω–¥–∂–∏ –∏ –ø–æ–ª—É—á–∞–π –±–æ–Ω—É—Å–Ω—ã–µ –±–∞–ª–ª—ã!</i>"
    
    await message.answer(challenges_message, parse_mode='HTML')

# –ö–Ω–æ–ø–∫–∞ "–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å"
@dp.message(lambda message: message.text == "üìä –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å")
async def show_occupancy(message: types.Message):
    user_id = message.from_user.id
    
    if user_id not in users_data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —á–µ—Ä–µ–∑ /start")
        return
    
    free_seats = coworking_status["total_seats"] - coworking_status["occupied_seats"]
    occupancy_percentage = (coworing_status["occupied_seats"] / coworking_status["total_seats"]) * 100
    
    if occupancy_percentage < 30:
        status_emoji = "üü¢"
        status_text = "–°–≤–æ–±–æ–¥–Ω–æ"
    elif occupancy_percentage < 70:
        status_emoji = "üü°"
        status_text = "–°—Ä–µ–¥–Ω—è—è –∑–∞–≥—Ä—É–∑–∫–∞"
    else:
        status_emoji = "üî¥"
        status_text = "–ú–Ω–æ–≥–æ–ª—é–¥–Ω–æ"
    
    occupancy_message = (
        f"üìä <b>–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å –∫–æ–≤–æ—Ä–∫–∏–Ω–≥–∞:</b>\n\n"
        f"{status_emoji} <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n"
        f"üë• <b>–õ—é–¥–µ–π:</b> {coworking_status['occupied_seats']}/{coworking_status['total_seats']}\n"
        f"ü™ë <b>–°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç:</b> {free_seats}\n"
        f"‚è∞ <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {coworking_status['last_updated']}\n\n"
        f"<i>–ü—Ä–∏—Ö–æ–¥–∏ –≤ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è! üïê</i>"
    )
    
    await message.answer(occupancy_message, parse_mode='HTML')

# –ö–Ω–æ–ø–∫–∞ "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"
@dp.message(lambda message: message.text == "üìÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
async def start_booking(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    
    if user_id not in users_data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —á–µ—Ä–µ–∑ /start")
        return
    
    await message.answer(
        "üìÖ <b>–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏:</b>\n\n"
        "–î–ª—è –∫–∞–∫–æ–π —Ü–µ–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏—Ç–æ—Ä–∏—é?\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: —Å–æ–±—Ä–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã, –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, —É—á–µ–±–∞ –∏ —Ç.–¥.",
        parse_mode='HTML'
    )
    await state.set_state(BookingState.purpose)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.message(BookingState.purpose)
async def process_booking_purpose(message: types.Message, state: FSMContext):
    await state.update_data(purpose=message.text)
    await message.answer(
        "üìÜ –ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –Ω—É–∂–Ω–∞ –∞—É–¥–∏—Ç–æ—Ä–∏—è?\n"
        "–£–∫–∞–∂–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.12.2024)"
    )
    await state.set_state(BookingState.date)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.message(BookingState.date)
async def process_booking_date(message: types.Message, state: FSMContext):
    await state.update_data(date=message.text)
    await message.answer(
        "‚è∞ –ù–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è?\n"
        "–£–∫–∞–∂–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:30)"
    )
    await state.set_state(BookingState.time)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.message(BookingState.time)
async def process_booking_time(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    user_id = message.from_user.id
    
    booking_info = (
        f"‚úÖ <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
        f"<b>–¶–µ–ª—å:</b> {user_data['purpose']}\n"
        f"<b>–î–∞—Ç–∞:</b> {user_data['date']}\n"
        f"<b>–í—Ä–µ–º—è:</b> {message.text}\n"
        f"<b>–ò–º—è:</b> {users_data[user_id]['first_name']} {users_data[user_id]['last_name']}\n\n"
        f"<i>–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è! üìû</i>"
    )
    
    await message.answer(booking_info, parse_mode='HTML')
    await state.clear()

# –ö–Ω–æ–ø–∫–∞ "–î–æ–Ω–∞—Ç"
@dp.message(lambda message: message.text == "‚ù§Ô∏è –î–æ–Ω–∞—Ç")
async def donate_handler(message: types.Message):
    user_id = message.from_user.id
    
    if user_id not in users_data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —á–µ—Ä–µ–∑ /start")
        return
    
    await message.answer(
        "üôè <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ–≤–æ—Ä–∫–∏–Ω–≥–∞:</b>\n\n"
        "–¢—ã –º–æ–∂–µ—à—å –ø–æ–º–æ—á—å –Ω–∞—à–µ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É!\n"
        "–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ:\n"
        "‚Ä¢ –ß–µ–∫–∞ –∑–∞ –¥–æ–Ω–∞—Ç\n"
        "‚Ä¢ –ï–¥—ã –∏–ª–∏ –Ω–∞–ø–∏—Ç–∫–æ–≤\n"
        "‚Ä¢ –ü–æ–ª–µ–∑–Ω—ã—Ö –≤–µ—â–µ–π\n\n"
        "<i>–ó–∞ –∫–∞–∂–¥—ã–π –¥–æ–Ω–∞—Ç —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –±–∞–ª–ª—ã —Ä–µ–π—Ç–∏–Ω–≥–∞!</i>",
        parse_mode='HTML'
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–æ–Ω–∞—Ç–∞
@dp.message(lambda message: message.photo)
async def process_donation_photo(message: types.Message):
    user_id = message.from_user.id
    
    if user_id not in users_data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —á–µ—Ä–µ–∑ /start")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º 10 –±–∞–ª–ª–æ–≤ –∑–∞ –¥–æ–Ω–∞—Ç
    user_ratings[user_id] = user_ratings.get(user_id, 0) + 10
    
    await message.answer(
        "‚úÖ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–Ω–∞—Ç!</b>\n\n"
        "–ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º —Ç–≤–æ–µ —Ñ–æ—Ç–æ –∏ –Ω–∞—á–∏—Å–ª–∏–º –±–∞–ª–ª—ã.\n"
        f"–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: <b>{user_ratings[user_id]} ‚≠ê</b>\n\n"
        "<i>–¢—ã –¥–µ–ª–∞–µ—à—å –Ω–∞—à –∫–æ–≤–æ—Ä–∫–∏–Ω–≥ –ª—É—á—à–µ! üí´</i>",
        parse_mode='HTML'
    )

# –ö–Ω–æ–ø–∫–∞ "–°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ"
@dp.message(lambda message: message.text == "üö® –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ")
async def report_problem(message: types.Message):
    await message.answer(
        "üõ†Ô∏è <b>–°–æ–æ–±—â–∏ –æ –ø—Ä–æ–±–ª–µ–º–µ:</b>\n\n"
        "–û–ø–∏—à–∏, —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å:\n"
        "‚Ä¢ –ß—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç?\n"
        "‚Ä¢ –ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è?\n"
        "‚Ä¢ –ù–∞—Å–∫–æ–ª—å–∫–æ —ç—Ç–æ —Å—Ä–æ—á–Ω–æ?\n\n"
        "<i>–ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ!</i>",
        parse_mode='HTML'
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø—Ä–æ–±–ª–µ–º—ã/–∑–∞–ø—Ä–æ—Å—ã)
@dp.message(lambda message: message.text and message.text not in ["‚≠ê –ú–æ–π —Ä–µ–π—Ç–∏–Ω–≥", "üèÜ –¢–æ–ø —Ä–µ–π—Ç–∏–Ω–≥", "‚ù§Ô∏è –î–æ–Ω–∞—Ç", "üö® –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ"])
async def process_problem_report(message: types.Message):
    user_id = message.from_user.id
    
    if user_id not in users_data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —á–µ—Ä–µ–∑ /start")
        return
    
    await message.answer(
        "‚úÖ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!</b>\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Ç–≤–æ–∏–º –∑–∞–ø—Ä–æ—Å–æ–º.\n"
        "<i>–°–∫–æ—Ä–æ —Å —Ç–æ–±–æ–π —Å–≤—è–∂—É—Ç—Å—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.</i>",
        parse_mode='HTML'
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! üöÄ")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
